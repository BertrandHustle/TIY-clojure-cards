<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1465484493297">{:repl-history {:ide [], :local [&quot;(conj (repeatedly 2 #(inc 1)))&quot; &quot;m&quot; &quot;(conj (repeatedly 3 #(inc (+ n 1))))&quot; &quot;(conj (repeatedly 3 #(inc (inc n ))))&quot; &quot;(recur (conj (repeatedly 3 #(inc (inc n )))))&quot; &quot;(recur (inc 2))&quot; &quot;(inc 2)&quot; &quot;recur&quot; &quot;(recur)&quot; &quot;asdj&quot; &quot;ajsd&quot; &quot;aj&quot; &quot;(def n 2)&quot; &quot;n&quot; &quot;(inc n)&quot; &quot;(repeatedly 2 (inc n))&quot; &quot;(repeatedly 2 #(inc n))&quot; &quot;(conj -&gt; (inc(inc(inc n))))&quot; &quot;(-&gt; conj (inc(inc(inc n))))&quot; &quot;(-&gt; n (inc(inc(inc n))))&quot; &quot;(-&gt; n (inc(inc(inc))))&quot; &quot;(-&gt; n (conj) (inc) (inc) (inc))&quot; &quot;(-&gt; n (conj(inc n) (inc) (inc)))&quot; &quot;(-&gt; n (conj(inc) (inc) (inc)))&quot; &quot;(-&gt; n (inc) (inc) (inc))&quot; &quot;(-&gt; n (print (inc)) (inc) (inc))&quot; &quot;(-&gt; n (print) (inc) (inc) (inc))&quot; &quot;test-set&quot; &quot;(distinct? (map :rank test-hand))&quot; &quot;(distinct (map :rank test-hand))&quot; &quot;(distinct (map :rank '(2 2 2 3)))&quot; &quot;(distinct ('(2 2 2 3)))&quot; &quot;(distinct '(2 2 2 3))&quot; &quot;(distinct '(2 3 2 3))&quot; &quot;(conj 2)&quot; &quot;(conj 2 3)&quot; &quot;(conj '() 2)&quot; &quot;(conj '() (inc 2)&quot; &quot;(conj '() (inc 2))&quot; &quot;(conj '() 2 (inc 2) (inc(inc 2)))&quot; &quot;(conj '() \n      (inc(inc(inc 2))) \n      (inc(inc 2))\n      (inc 2)\n      2)&quot; &quot;(ascending-count 3)&quot; &quot;(ascending-count 8)&quot; &quot;(and (straight? test-hand) (flush? test-hand))&quot; &quot;(flush? test-hand)&quot; &quot;(four-of-a-kind? test-hand)&quot; &quot;(three-of-a-kind? test-hand)&quot; &quot;(contains? test-hand rank:10)&quot; &quot;(contains? test-hand :rank 10)&quot; &quot;(contains? test-hand (:rank 10))&quot; &quot;(contains? test-hand (:rank 2))&quot; &quot;(map :rank test-hand)&quot; &quot;(contains? (map :rank test-hand) 2)&quot; &quot;(some? #{2} (map :rank test-hand))&quot; &quot;(contains? test-hand :rank)&quot; &quot;(contains? {test-hand} :rank)&quot; &quot;(some #{2} test-hand :rank)&quot; &quot;(some #{2} (map :rank test-hand))&quot; &quot;(some #{2 3 4 5} (map :rank test-hand))&quot; &quot;sort (map :rank hand))&quot; &quot;(= (sort (map :rank test-hand)\n         (1 10 11 12 13)))&quot; &quot;(= (sort (map :rank test-hand))\n         (1 10 11 12 13))&quot; &quot;(= (sort (map :rank test-hand))\n   (1 10 11 12 13))&quot; &quot;(= (sort (map :rank test-hand))\n   '(1 10 11 12 13))&quot; &quot;(= (sort (map :rank test-hand))\n   '(1 10 11 12 14))&quot; &quot;(royal-flush? test-hand)&quot; &quot;(straight-flush?)&quot; &quot;(= (sort (map :rank hand)) ('(1 10 11 12 13))&quot; &quot;(= (sort (map :rank hand)) ('(1 10 11 12 13)))&quot; &quot;(= (sort (map :rank test-hand)) ((1 10 11 12 13)))&quot; &quot;(= (sort (map :rank test-hand)) ('(1 10 11 12 13)))&quot; &quot;(sort (map :rank hand))&quot; &quot;(sort (map :rank test-hand))&quot; &quot;(= (1 10 11 12 13) (1 10 11 12 13))&quot; &quot;(high-straight? test-hand)&quot; &quot;(1 2 3)&quot; &quot;'(1 2 3)&quot; &quot;(drop 1'(1 2 3))&quot; &quot;(drop-first-n 2 test-hand)&quot; &quot;(full-house? test-hand)&quot; &quot;(pair? test-hand)&quot; &quot;(two-pair? test-hand)&quot; &quot;(winning-hand hand1 hand2)&quot; &quot;(winning-hand)&quot; &quot;(straight-flush? test-hand)&quot; &quot;(sort(map :rank test-hand))&quot; &quot;(get(sort(map :rank test-hand)) 1 )&quot; &quot;(conj [] 1)&quot; &quot;(conj [] 1 2)&quot; &quot;(nth (sort(map :rank test-hand)) 2)&quot; &quot;(nth (sort(map :rank test-hand)) 1)&quot; &quot;(nth (sort(map :rank test-hand)) 4)&quot; &quot;(get (ascend-count test-hand) 1)&quot; &quot;(get (ascend-count test-hand) 5)&quot; &quot;(get (ascend-count test-hand) 10)&quot; &quot;(nth (ascend-count test-hand) 1)&quot; &quot;\n(ascend-count test-hand)&quot; &quot;(first(ascend-count test-hand))&quot; &quot;test-hand&quot; &quot;(ascend-count test-hand)&quot; &quot;(straight? test-hand)&quot;], :remote []}}</component>
</project>