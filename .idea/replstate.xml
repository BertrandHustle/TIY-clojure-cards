<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1465336487370">{:repl-history {:ide [], :local [&quot;(map min (map :rank test-hand))&quot; &quot;(min (map :rank test-hand))&quot; &quot;(apply min (map :rank test-hand))&quot; &quot;(apply min min (map :rank test-hand))&quot; &quot;(disj (map :rank test-hand))&quot; &quot;(disj (map :rank test-hand) first)&quot; &quot;(def test-set (map :rank test-hand))&quot; &quot;(= (first test-set (rest test-set)))&quot; &quot;(= (first test-set) (rest test-set))&quot; &quot;(first test-set)&quot; &quot;(def test-set (5 5 4 5))&quot; &quot;(def test-set '(5 5 4 5))&quot; &quot;(sort (disj (first test-set)))&quot; &quot;(sort (drop 1 test-set))&quot; &quot;(drop 1 (sort test-set))&quot; &quot;(def test-set (2 3 3 4))&quot; &quot;(def test-set '(2 3 3 4))&quot; &quot;(= (drop 1 (sort test-set)))&quot; &quot;(apply = (drop 1 (sort test-set)))&quot; &quot;(apply = (drop 1 (sort (5 5 4 5))))&quot; &quot;(apply = (drop 1 (sort '(5 5 4 5))))&quot; &quot;(apply = (drop 1 (sort '(5 4 4 5))))&quot; &quot;(apply = (drop 1 (sort '(5 4 4 4))))&quot; &quot;(sort-by count '(5 4 4 4))&quot; &quot;(sort-by count (5 4 4 4))&quot; &quot;(sort-by val = (5 4 4 4))&quot; &quot;(sort-by val = '(5 4 4 4))&quot; &quot;(sort-by val '(5 4 4 4))&quot; &quot;(sort-by 5 '(5 4 4 4))&quot; &quot;(sort-by 5 [5 4 4 4])&quot; &quot;(sort-by  [5 4 4 4])&quot; &quot;(sort-by &gt; [5 4 4 4])&quot; &quot;(sort-by &lt; [5 4 4 4])&quot; &quot;(sort-by = [5 4 4 4])&quot; &quot;(def test-set \n  '(5 5 5 1))&quot; &quot;(compare (first (sort test-set)) (last (sort test-set)))&quot; &quot;(compare (first (sort test-set)) (first (sort test-set)))&quot; &quot;(apply = (drop 2 (sort test-hand)))&quot; &quot;(apply = (drop 2 (sort test-set)))&quot; &quot;test-set&quot; &quot;(def test-set '(1 7 1 12))&quot; &quot;(apply = (drop 2 (sort test-set))))\n&quot; &quot;(apply = (drop 2 (sort test-set)))\n&quot; &quot;(sort test-set)&quot; &quot;(apply = (drop-last 2 (sort test-set)))\n&quot; &quot;(apply = (drop-last 2 (sort '(1 4 9 16))))\n&quot; &quot;test-hand\n&quot; &quot;(def test-hand #{{:suit :spades, :rank 1} {:suit :hearts, :rank 5} {:suit :clubs, :rank 5} {:suit :diamonds, :rank 7}})&quot; &quot;(def test-hand #{{:suit :spades, :rank 7} {:suit :hearts, :rank 5} {:suit :clubs, :rank 5} {:suit :diamonds, :rank 7}})&quot; &quot;(four-of-a-kind? test-hand)&quot; &quot;(two-pair? test-hand)&quot; &quot;(three-of-a-kind? test-hand)&quot; &quot;test-hand&quot; &quot;(map :rank test-hand)&quot; &quot;(sort (map :rank test-hand)&quot; &quot;(sort (map :rank test-hand))&quot; &quot;(first(sort (map :rank test-hand))&quot; &quot;(first(sort (map :rank test-hand)))&quot; &quot;(into 2)&quot; &quot;(into '() 2)&quot; &quot;(conj 2)&quot; &quot;(conj inc 2)&quot; &quot;(conj (inc 2))&quot; &quot;(conj (inc(inc 2)))&quot; &quot;(conj (repeat 2(inc 2)))&quot; &quot;(conj (repeatedly 2(inc 2)))&quot; &quot;(conj (repeatedly (inc 2)))&quot; &quot;(conj (repeatedly 2 (inc 2)))&quot; &quot;(repeatedly 2 (inc 2))&quot; &quot;(repeatedly (inc 2)2)&quot; &quot;(repeatedly (inc 2) 2)&quot; &quot;(repeatedly 2 #(inc 2))&quot; &quot;(repeatedly 2 #(conj (inc 2)))&quot; &quot;(repeatedly 2 #(conj [] (inc 2)))&quot; &quot;(repeatedly 2 #(conj 2 (inc )))&quot; &quot;(inc (inc 2))&quot; &quot;(inc 1 2 3 4 5)&quot; &quot;(apply inc 1 2 3 4 5)&quot; &quot;(conj '(1 2 3) 4)&quot; &quot;(conj '(1 2 3) inc)&quot; &quot;(conj '(1 2 3) (inc 1))&quot; &quot;(conj '(1 2 3) (repeatedly 2 #(inc 1)))&quot; &quot;(conj (inc 1))&quot; &quot;(inc (conj (inc 1)))&quot; &quot;(repeatedly 2 #(conj (inc 1)))&quot; &quot;(conj repeatedly #(inc 1))&quot; &quot;(conj (repeatedly #(inc 1)))&quot; &quot;(conj (repeatedly 2 #(inc 1)))&quot; &quot;(def n 2)&quot; &quot;m&quot; &quot;n&quot; &quot;(conj (repeatedly 3 #(inc (+ n 1))))&quot; &quot;(conj (repeatedly 3 #(inc (inc n ))))&quot; &quot;(recur (conj (repeatedly 3 #(inc (inc n )))))&quot; &quot;(recur (inc 2))&quot; &quot;(inc 2)&quot; &quot;recur&quot; &quot;(recur)&quot; &quot;asdj&quot; &quot;ajsd&quot; &quot;aj&quot;], :remote []}}</component>
</project>